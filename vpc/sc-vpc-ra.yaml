AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: public and private subnets in two availability zones. (fdp-1oc5gkoph)'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Region Configuration
        Parameters:
          - RegionAZ1Name
          - RegionAZ2Name
      - Label:
          default: VPC Configuration
        Parameters:
          - VPCName
          - VPCCIDR
      - Label:
          default: Public Subnet Configuration
        Parameters:
          - SubnetAPublicCIDR
          - SubnetBPublicCIDR
      - Label:
          default: Private Subnet Configuration
        Parameters:
          - SubnetAPrivateCIDR
          - SubnetBPrivateCIDR
      - Label:
          default: Linux Bastion Host Configuration
        Parameters:
          - CreateBastionInstance
          - BastionInstanceType
          - EC2KeyPair
          - BastionSSHCIDR
          - LatestAmiId
Parameters:
  RegionAZ1Name:
    Description: Availability Zone 1 Name in Region
    Type: AWS::EC2::AvailabilityZone::Name
  RegionAZ2Name:
    Description: Availability Zone 2 Name in Region
    Type: AWS::EC2::AvailabilityZone::Name
  VPCName:
    Description: Human-friendly name for the VPC
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
    MinLength: 3
  VPCCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.229.0.0/16
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  SubnetAPublicCIDR:
    Description: CIDR block for the public subnet in availability zone
    Type: String
    Default: 10.229.10.0/24
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  SubnetBPublicCIDR:
    Description: CIDR block for the public subnet in availability zone
    Type: String
    Default: 10.229.20.0/24
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  SubnetAPrivateCIDR:
    Description: CIDR block for the private subnet in availability zone
    Type: String
    Default: 10.229.30.0/24
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  SubnetBPrivateCIDR:
    Description: CIDR block for the private subnet in availability zone
    Type: String
    Default: 10.229.40.0/24
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  CreateBastionInstance:
    Description: Create a bastion instance inside the VPC
    Type: String
    Default: false
    ConstraintDescription: ''
    AllowedValues:
      - true
      - false
  BastionInstanceType:
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    Default: t3.micro
    Description: Amazon EC2 instance as the bastion instance
    Type: String
  EC2KeyPair:
    Description: Name of existing EC2 key pair for production hosts
    Type: AWS::EC2::KeyPair::KeyName
  BastionSSHCIDR:
    Description: CIDR block to allow access to bastion SSH
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
Conditions:
  CreateBastionResources: !Equals
    - !Ref 'CreateBastionInstance'
    - true
  HasKeyName: !Not
    - !Equals
      - ''
      - !Ref 'EC2KeyPair'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'VPCCIDR'
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  SubnetAPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'RegionAZ1Name'
      CidrBlock: !Ref 'SubnetAPublicCIDR'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: A public - sc-vpc-ra
        - Key: Reach
          Value: public
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  SubnetBPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'RegionAZ2Name'
      CidrBlock: !Ref 'SubnetBPublicCIDR'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: B public - sc-vpc-ra
        - Key: Reach
          Value: public
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  SubnetAPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'RegionAZ1Name'
      CidrBlock: !Ref 'SubnetAPrivateCIDR'
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: A private - sc-vpc-ra
        - Key: Reach
          Value: private
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  SubnetBPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'RegionAZ2Name'
      CidrBlock: !Ref 'SubnetBPrivateCIDR'
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: B private - sc-vpc-ra
        - Key: Reach
          Value: private
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  RouteTableAPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: A Public - sc-vpc-ra
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  RouteTableBPublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: B Public - sc-vpc-ra
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  RouteTableAPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: A Private - sc-vpc-ra
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  RouteTableBPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: B Private - sc-vpc-ra
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  RouteTableAssociationAPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetAPublic'
      RouteTableId: !Ref 'RouteTableAPublic'
  RouteTableAssociationBPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetBPublic'
      RouteTableId: !Ref 'RouteTableBPublic'
  RouteTableAssociationAPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetAPrivate'
      RouteTableId: !Ref 'RouteTableAPrivate'
  RouteTableAssociationBPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'SubnetBPrivate'
      RouteTableId: !Ref 'RouteTableBPrivate'
  RouteTablePublicAInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'RouteTableAPublic'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  RouteTablePublicBInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref 'RouteTableBPublic'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  NetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Public - sc-vpc-ra
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  NetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: Private - sc-vpc-ra
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  SubnetNetworkAclAssociationAPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'SubnetAPublic'
      NetworkAclId: !Ref 'NetworkAclPublic'
  SubnetNetworkAclAssociationBPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'SubnetBPublic'
      NetworkAclId: !Ref 'NetworkAclPublic'
  SubnetNetworkAclAssociationAPrivate:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'SubnetAPrivate'
      NetworkAclId: !Ref 'NetworkAclPrivate'
  SubnetNetworkAclAssociationBPrivate:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'SubnetBPrivate'
      NetworkAclId: !Ref 'NetworkAclPrivate'
  NetworkAclEntryInPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPublic'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPrivateAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPrivate'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAclPrivate'
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateBastionResources
    Properties:
      GroupDescription: Enables SSH Access to Bastion Hosts
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - Description: allow SSH
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'BastionSSHCIDR'
        - Description: allow icmp
          IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref 'BastionSSHCIDR'
      SecurityGroupEgress:
        - Description: allow all outgoing
          IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
  BastionInstance:
    Type: AWS::EC2::Instance
    Condition: CreateBastionResources
    Properties:
      ImageId: !Ref 'LatestAmiId'
      InstanceType: !Ref 'BastionInstanceType'
      KeyName: !If
        - HasKeyName
        - !Ref 'EC2KeyPair'
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub 'SC-BASTION-${VPC}'
      NetworkInterfaces:
        - GroupSet:
            - !Ref 'BastionSecurityGroup'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref 'SubnetAPublic'
      UserData: !Base64
        Fn::Sub: "#!/bin/bash -xe\nyum -y update\n"
  NATGatewayA:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NATGatewayAEIP.AllocationId'
      SubnetId: !Ref 'SubnetAPublic'
      Tags:
        - Key: Name
          Value: nat-gateway-Aside
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  NATGatewayAEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayARoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'RouteTableAPrivate'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGatewayA'
  NATGatewayB:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NATGatewayBEIP.AllocationId'
      SubnetId: !Ref 'SubnetBPublic'
      Tags:
        - Key: Name
          Value: nat-gateway-Bside
        - Key: Description
          Value: Service-Catalog-VPC-Reference-Architecture
  NATGatewayBEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGatewayBRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'RouteTableBPrivate'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGatewayB'
Outputs:
  TemplateID:
    Value: service-catalog-reference-architectures/sc-vpc-ra
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-TemplateID'
  AWSRegionName:
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-AWSRegionName'
  RegionAZ1Name:
    Value: !Ref 'RegionAZ1Name'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-RegionAZ1Name'
  RegionAZ2Name:
    Value: !Ref 'RegionAZ2Name'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-RegionAZ2Name'
  VPCID:
    Description: 'VPCID of the newly created VPC'
    Value: !Ref 'VPC'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-VPCID'
  VPCCIDR:
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-VPCCIDR'
  SubnetAPublicID:
    Description: 'ID of the first public subnet'
    Value: !Ref 'SubnetAPublic'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-SubnetAPublicID'
  SubnetAPublicCIDR:
    Value: !Ref 'SubnetAPublicCIDR'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-SubnetAPublicCIDR'
  SubnetBPublicID:
    Description: 'ID of the second public subnet'
    Value: !Ref 'SubnetBPublic'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-SubnetBPublicID'
  SubnetBPublicCIDR:
    Value: !Ref 'SubnetBPublicCIDR'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-SubnetBPublicCIDR'
  SubnetAPrivateID:
    Description: 'ID of the first private subnet'
    Value: !Ref 'SubnetAPrivate'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-SubnetAPrivateID'
  SubnetAPrivateCIDR:
    Value: !Ref 'SubnetAPrivateCIDR'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-SubnetAPrivateCIDR'
  SubnetBPrivateID:
    Description: 'ID of the second private subnet'
    Value: !Ref 'SubnetBPrivate'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-SubnetBPrivateID'
  SubnetBPrivateCIDR:
    Value: !Ref 'SubnetAPrivateCIDR'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-SubnetBPrivateCIDR'
  InternetGatewayID:
    Value: !Ref 'InternetGateway'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-InternetGatewayID'
  NATGatewayAID:
    Value: !Ref 'NATGatewayA'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-NATGatewayAID'
  NATGatewayAEIP:
    Value: !Ref 'NATGatewayAEIP'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-NATGatewayAEIP'
  NATGatewayBID:
    Value: !Ref 'NATGatewayB'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-NATGatewayBID'
  NATGatewayBEIP:
    Value: !Ref 'NATGatewayBEIP'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-NATGatewayBEIP'
  RouteTableAPublic:
    Value: !Ref 'RouteTableAPublic'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-RouteTableAPublic'
  RouteTableBPublic:
    Value: !Ref 'RouteTableBPublic'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-RouteTableBPublic'
  RouteTableAPrivate:
    Value: !Ref 'RouteTableAPrivate'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-RouteTableAPrivate'
  RouteTableBPrivate:
    Value: !Ref 'RouteTableBPrivate'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-RouteTableBPrivate'
  NetworkAclPublic:
    Value: !Ref 'NetworkAclPublic'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-NetworkAclPublic'
  NetworkAclPrivate:
    Value: !Ref 'NetworkAclPrivate'
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-NetworkAclPrivate'
  CreatedBastionInstance:
    Value: !Ref 'BastionInstance'
    Condition: CreateBastionResources
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-CreatedBastionInstance'
  BastionInstanceType:
    Value: !Ref 'BastionInstanceType'
    Condition: CreateBastionResources
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-BastionInstanceType'
  BastionInstancePublicIP:
    Value: !GetAtt 'BastionInstance.PublicDnsName'
    Condition: CreateBastionResources
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-BastionInstancePublicIP'
  BastionSecurityGroupID:
    Value: !Ref 'BastionSecurityGroup'
    Condition: CreateBastionResources
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-BastionSecurityGroupID'
  EC2KeyPair:
    Value: !If
      - HasKeyName
      - !Ref 'EC2KeyPair'
      - !Ref 'AWS::NoValue'
    Condition: CreateBastionResources
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-EC2KeyPair'
  BastionSSHCIDR:
    Value: !Ref 'BastionSSHCIDR'
    Condition: CreateBastionResources
    Export:
      Name: !Sub '${AWS::Region}-${VPCName}-BastionSSHCIDR'
